
/*
This is just a sample jenkins pipeline groovy script. This can be leveraged with minimal changes like
 jenkins k8s agent setup, kubernetes
*/
pipeline {
        environment {

            /*
            *  Best Practise
            *  APP Name should be as same as repo, project & helm chart name
            *  APP Version needs to be upgraded once prod push (Now e2e)
            *  APP Category decides to which namespace the app should get deployed
            *  Acceptable categories are  => api| ui| ml| tools
            */
            APP_NAME = "star-wars"
            APP_VERSION = "1.0.0"
            APP_CATEGORY = "api"
            APP_INGRESS_DNS_BASE = "starwars.com"
            APP_INGRESS_DOMAIN_PREFIX = "api"

            /*
            * Common config
            * Registry, Branch
            */

            // Registry details
            REGISTRY_BASE_URI = "docker.io"
            REGISTRY_GROUP_NAME = "sundargsv"
            REGISTRY_IMAGE_BASE = "${REGISTRY_BASE_URI}/${REGISTRY_GROUP_NAME}/${APP_NAME}"

            HELM_TEMPLATES_PATH = "helm/"
            DOCKERFILE_PATH = "docker/Dockerfile"

    }
    agent { label 'sundargsv/jenkins-agent:1.0.3' }
    stages {

        // App packaging and Docker build
        stage('Build'){
            steps{

                sh "echo The current branch is ${env.BRANCH_NAME}"
                // Defaulting
                script {

                    switch (env.BRANCH_NAME) {

                        /*
                        * Assuming there are 3 branches like dev| test| prod
                        * BUILD_TAG has to be latest whenever pushing to dev
                        * ENVIRONMENT decides the application config/ property file
                        */
                        case 'master':
                            env.BUILD_TAG = input message: 'Update the Production Version!', parameters: [string(defaultValue: '0', description: 'Update App Version', name: 'Version')]
                            env.ENVIRONMENT = "prod"
                            env.K8S_NAMESPACE = "prod-${env.APP_CATEGORY}"
                            env.INGRESS_ENABLED = false
                            // env.INGRESS_DOMAIN = "${env.APP_INGRESS_DOMAIN_PREFIX}.${env.APP_INGRESS_DNS_BASE}"
                            // env.INGRESS_PATH = "/prod"
                            break
                        case 'test':
                             env.BUILD_TAG = "latest"
                             env.ENVIRONMENT = "test"
                             env.K8S_NAMESPACE = "test-${env.APP_CATEGORY}"
                             env.INGRESS_ENABLED = false
                             break
                        default:
                            env.BUILD_TAG = "latest"
                            env.ENVIRONMENT = "development"
                            env.K8S_NAMESPACE = "dev-${env.APP_CATEGORY}"
                            env.INGRESS_ENABLED = false
                            break
                    }

                }


                // maven build step will run the application's integration and unit test cases
                sh "mvn clean install"

                script {
                    try{
                        sh "docker rmi ${env.REGISTRY_IMAGE_BASE}:${env.BUILD_TAG}"
                    }catch (e){
                        sh "echo STEP SKIPPED: No Image with same name found to remove"
                    }
                }

                // docker build will build a new docker images with the updated app jar
                sh "docker build -f ${env.DOCKERFILE_PATH} -t ${env.REGISTRY_IMAGE_BASE}:${env.BUILD_TAG} ."

            }
        }

        // push step will push the updated docker image to the docker registry
        stage('Push'){
            steps{
                withCredentials([file(credentialsId: 'access_to_registry', variable: 'KEY')]){
                    sh "chmod 600 $KEY"
                    sh "cat $KEY | docker login -u _json_key --password-stdin https://docker-registry.io"
                    sh "docker push ${env.REGISTRY_IMAGE_BASE}:${env.BUILD_TAG}"
                }
            }
        }


        stage('Deploy'){
             steps{
                 script {
                     if (env.BRANCH_NAME == "master") {
                         // deployment to production
                         withKubeConfig(credentialsId: 'access_to_prod_k8s_kubeconfig'){
                             deploymentScript()
                         }
                     }else{
                         // deployment to non-production
                         withKubeConfig(credentialsId: 'access_to_non_prod_k8s_kubeconfig'){
                             deploymentScript()
                         }
                     }
                 }
             }
        }
    }

    // Send notification
    post {
        success {
            script {
                wrap([$class: 'BuildUser']) {
                    slackSend(color: '#00FF00', message: "SUCCESS: ${env.JOB_NAME} job started by ${BUILD_USER} has been deployed successfully to ${env.ENVIRONMENT} environment.\nBuild Info:\nNo: #${env.BUILD_NUMBER}:\nURL: ${env.RUN_DISPLAY_URL}" )
                }
            }
        }

        failure{
            script {
                wrap([$class: 'BuildUser']) {
                    slackSend(color: '#FF0000', message: "FAILURE: ${env.JOB_NAME} job started by ${BUILD_USER} was failed to deploy in ${env.ENVIRONMENT} environment.\nBuild Info:\nNo: #${env.BUILD_NUMBER}:\nURL: ${env.RUN_DISPLAY_URL}")
                }
            }
        }
    }

}

// deployment scripts as a func
void deploymentScript(){
    try{
        sh "echo The current Namespace is ${env.K8S_NAMESPACE} and environment is ${env.ENVIRONMENT}"
        sh "helm upgrade ${env.APP_NAME}-${env.ENVIRONMENT} helm/. --namespace=${env.K8S_NAMESPACE} --set image.tag=${env.BUILD_TAG} --set environment=${env.ENVIRONMENT} --set ingress.enabled=${env.INGRESS_ENABLED} --set ingress.domain=${env.INGRESS_DOMAIN} --set ingress.paths.path=${env.INGRESS_PATH}"
    }catch (e){
        sh "echo STEP SKIPPED: No chart with same name found to upgrade"
        sh "helm install ${env.APP_NAME}-${env.ENVIRONMENT} helm/. --namespace=${env.K8S_NAMESPACE} --set image.tag=${env.BUILD_TAG} --set environment=${env.ENVIRONMENT} --set ingress.enabled=${env.INGRESS_ENABLED} --set ingress.domain=${env.INGRESS_DOMAIN} --set ingress.paths.path=${env.INGRESS_PATH}"
    }

    // Review
    sh "kubectl get all -n ${env.K8S_NAMESPACE} | grep ${env.APP_NAME}"
    // sh "kubectl get ing -n ${env.K8S_NAMESPACE} | grep ${env.APP_NAME}"
}}